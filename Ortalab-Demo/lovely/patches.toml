[manifest]
version = "1.0.0"
dump_lua = true
priority = 1

## Shop Card Area Width
[[patches]]
[patches.pattern]
target = 'tag.lua'
pattern = '''self.pos = proto.pos'''
position = 'after'
match_indent = true
payload = '''self.soul_pos = proto.soul_pos'''

[[patches]]
[patches.pattern]
target = 'tag.lua'
pattern = '''tag_sprite.T.scale = 1'''
position = 'before'
match_indent = true
payload = '''if G.P_TAGS[self.key].soul_pos and G.P_TAGS[self.key].discovered then
    tag_sprite.soul = Sprite(0,0,_size*1,_size*1, G.ASSET_ATLAS[G.P_TAGS[self.key].atlas], G.P_TAGS[self.key].soul_pos)

end'''

[[patches]]
[patches.pattern]
target = 'engine/sprite.lua'
pattern = '''for k, v in pairs(self.children) do'''
position = 'before'
match_indent = true
payload = '''
if self.soul then
    local scale_mod = 0.07 + 0.02*math.sin(1.8*G.TIMERS.REAL) + 0.00*math.sin((G.TIMERS.REAL - math.floor(G.TIMERS.REAL))*math.pi*14)*(1 - (G.TIMERS.REAL - math.floor(G.TIMERS.REAL)))^3
    local rotate_mod = 0.05*math.sin(1.219*G.TIMERS.REAL) + 0.00*math.sin((G.TIMERS.REAL)*math.pi*5)*(1 - (G.TIMERS.REAL - math.floor(G.TIMERS.REAL)))^2
    self.soul:draw_shader('dissolve',0, nil, nil, self, scale_mod, rotate_mod,nil, 0.05 + 0.03*math.sin(1.8*G.TIMERS.REAL),nil, 0.6)
    self.soul:draw_shader('dissolve', nil, nil, nil, self, scale_mod, rotate_mod,nil, -0.05)
end
'''

# Slayer Patch
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''G.FUNCS.draw_from_discard_to_deck()'''
position = 'after'
match_indent = true
payload = '''
G.GAME.blinds_defeated = (G.GAME.blinds_defeated or 0) + 1
'''

# Dandy Patch
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''G.GAME.unused_discards = (G.GAME.unused_discards or 0) + G.GAME.current_round.discards_left'''
position = 'before'
match_indent = true
payload = '''
G.GAME.unused_hands = (G.GAME.unused_hands or 0) + G.GAME.current_round.hands_left
'''
